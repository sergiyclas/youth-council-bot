import logging
import os
import re

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.types import FSInputFile

from bot.common.ai import generate_post, client
from bot.common.utils import generate_protocol, generate_attendance_list_full
from bot.keyboards.admin import admin_menu_kb, session_control_kb, admin_vote_kb, force_end_vote_kb, admin_end_vote_kb, \
    set_rv_name, yes_no_kb, set_session_type_kb, admin_fea_kb
from random import randint
from bot.keyboards.common import vote_kb, common_kb

from config import OPTION

if str(OPTION) == 'MySQL':
    from bot.database.database import Database
else:
    from bot.database.database_postgres import Database

ALLOWED_ADMINS = {1014099963}

admin_router = Router()


class AdminStates(StatesGroup):
    session_name = State()
    session_password = State()
    admin_name = State()
    session_agenda = State()
    agenda_question = State()
    youth_council_name = State()
    youth_council_city = State()
    youth_council_region = State()
    youth_council_head = State()
    youth_council_secretary = State()

class AdminState(StatesGroup):
    in_admin = State()
    waiting_for_session_code = State()
    waiting_for_user_id = State()


@admin_router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä /start –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    await state.clear()
    await message.answer(
        "–í—ñ—Ç–∞—é! –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π:",
        reply_markup=common_kb()
    )


@admin_router.message(F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é")
@admin_router.message(Command("create_session"))
async def create_session(message: types.Message, state: FSMContext):
    logging.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∏–Ω–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Å–µ—Å—ñ—ó:")
    await state.set_state(AdminStates.session_name)


@admin_router.message(AdminStates.session_name)
async def set_session_name(message: types.Message, state: FSMContext):
    session_name = message.text.strip()

    ignored_texts = ["üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π", "‚úÖ –ü–æ—á–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é",
                     "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ú–†", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é", "/help", "/post", "/join",
                     "/create_session", "/leave", "/merge_pdf", "/info"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç —î —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    if session_name in ignored_texts:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó, –∞ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è —Å–µ—Å—ñ—ó: {session_name}")
    await state.update_data(session_name=session_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Å—ñ—ó:")
    await state.set_state(AdminStates.session_password)


@admin_router.message(AdminStates.session_password)
async def set_session_password(message: types.Message, state: FSMContext, db: Database):
    session_password = message.text.strip()

    if len(session_password) > 20:
        await message.answer("–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤")
        return

    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–∞—Ä–æ–ª—å —Å–µ—Å—ñ—ó: {session_password}")
    await state.update_data(session_password=session_password)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Å–µ—Å—ñ—ó
    session_code = randint(1000, 9999)
    session_data = await state.get_data()
    logging.info(f"–ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ —Å–µ—Å—ñ—ó: {session_code}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Å–µ—Å—ñ—è –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    existing_session = await db.get_session_by_code(session_code)
    if existing_session:
        logging.info(f"–í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é: {session_code}")
        await db.delete_session(session_code)  # –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é
        await db.delete_related_data(session_code)  # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await db.add_session(
        session_code=session_code,
        session_name=session_data['session_name'],
        session_password=session_password,
        admin_id=message.from_user.id
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ session_code —É —Å—Ç–∞–Ω—ñ
    await state.update_data(session_code=session_code)

    logging.info(f"–°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {session_data['session_name']} –∑ –∫–æ–¥–æ–º {session_code}")
    await message.answer(
        f"–°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞! \n–ö–æ–¥ —Å–µ—Å—ñ—ó: <code>{session_code}</code>\n–ü–∞—Ä–æ–ª—å: <code>{session_password}</code>",
        parse_mode="HTML"
    )
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ —Å–µ—Å—ñ—ó:")
    await state.set_state(AdminStates.admin_name)



@admin_router.message(AdminStates.admin_name)
async def set_admin_name(message: types.Message, state: FSMContext, db: Database):
    admin_name = message.text.strip()
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ–¥ —Å–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —è–∫ —É—á–∞—Å–Ω–∏–∫–∞
    await db.add_participant(
        session_code=session_code,
        user_id=message.from_user.id,
        user_name=admin_name
    )

    logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Å–µ—Å—ñ—ó {session_code}")
    await message.answer(
        f"–î—è–∫—É—î–º–æ, {admin_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Å–µ—Å—ñ—é —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–µ—ó.",
        reply_markup=session_control_kb()
    )
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π (–∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):")
    await state.set_state(AdminStates.session_agenda)


@admin_router.message(AdminStates.session_agenda)
async def set_agenda(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    # –¢–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
    ignored_texts = [
        "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π", "‚úÖ –ü–æ—á–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ",
        "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ú–†", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é"
    ]

    # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message.text in ignored_texts:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π, –∞ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î session_name —ñ session_code —É —Å—Ç–∞–Ω—ñ
    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    if not session_name or not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É.")
        logging.error("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É —Å—Ç–∞–Ω—ñ")
        return

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ —Ä—è–¥–∫–∞—Ö —Ç–∞ –æ—á–∏—â–∞—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
    raw_agenda = message.text.split("\n")
    agenda = []

    for line in raw_agenda:
        clean_line = line.strip()

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à—É –Ω—É–º–µ—Ä–∞—Ü—ñ—é (—è–∫—â–æ —î), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "1. –¢–µ–∫—Å—Ç" –∞–±–æ "2) –¢–µ–∫—Å—Ç"
        clean_line = re.sub(r"^\d+[.)]\s*", "", clean_line)

        # –î–æ–¥–∞—î–º–æ —É —Å–ø–∏—Å–æ–∫ —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –ø—É—Å—Ç–∏–π
        if clean_line:
            agenda.append(clean_line)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    duplicate_items = {item for item in agenda if agenda.count(item) > 1}
    if duplicate_items:
        duplicates_text = "\n".join(duplicate_items)
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: —É –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–º—É —î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–∏—Ç–∞–Ω—å:\n<b>{duplicates_text}</b>\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–æ–≤—É.",
            parse_mode="HTML"
        )
        return

    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è —Å–µ—Å—ñ—ó {session_name}: {agenda}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await db.set_session_agenda(session_code=session_code, agenda=agenda)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    agenda_html = "<b>–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:</b>\n" + "\n".join(
        [f"{i + 1}. {item}" for i, item in enumerate(agenda)]
    )

    await message.answer(
        f"‚úÖ –ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –æ–Ω–æ–≤–ª–µ–Ω–æ.\n\n{agenda_html}\n\n–î–∞–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ:",
        reply_markup=session_control_kb(),
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Å–µ—Å—ñ—ó {session_name}")
    await state.clear()
    await state.update_data(session_code=session_code, session_name=session_name, agenda=agenda)


@admin_router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ú–†")
async def set_information_about_youth_council(message: types.Message, state: FSMContext, db: Database):
    admin_id = message.from_user.id

    result = await db.get_youth_council_info(admin_id)

    if result:
        council_info = result
        text = (f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ú–† –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞:\n\n"
                f"–ù–∞–∑–≤–∞: {council_info.name}\n"
                f"–ú—ñ—Å—Ç–æ: {council_info.city}\n"
                f"–†–µ–≥—ñ–æ–Ω: {council_info.region}\n"
                f"–ì–æ–ª–æ–≤–∞: {council_info.head}\n"
                f"–°–µ–∫—Ä–µ—Ç–∞—Ä: {council_info.secretary}\n\n"
                "–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é?")

        await message.answer(text, reply_markup=yes_no_kb())
    else:
        await message.answer("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ú–†. \n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ú–æ–ª–æ–¥—ñ–∂–Ω–æ—ó —Ä–∞–¥–∏:")
        await state.set_state(AdminStates.youth_council_name)


@admin_router.message(F.text == "–¢–∞–∫")
async def restart_youth_council_info(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ú–†:")
    await state.set_state(AdminStates.youth_council_name)


@admin_router.message(F.text == "–ù—ñ")
async def cancel_youth_council_update(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    current_question_index = await db.get_current_question_index(session_code)
    agenda = await db.get_session_agenda(session_code)

    if len(agenda) > current_question_index + 1:
        await message.answer("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ú–† —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=session_control_kb())
        await state.clear()
        await state.update_data(session_code=session_code, session_name=session_name, agenda=agenda, current_question_index=current_question_index)
        return

    await message.answer(
        "–£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é.",
        reply_markup=admin_end_vote_kb()
    )
    await state.clear()
    await state.set_state("admin_control")
    await state.update_data(session_code=session_code, session_name=session_name, agenda=agenda, current_question_index=current_question_index)
    return


@admin_router.message(AdminStates.youth_council_name)
async def set_youth_council_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:")
    await state.set_state(AdminStates.youth_council_city)


@admin_router.message(AdminStates.youth_council_city)
async def set_youth_council_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:")
    await state.set_state(AdminStates.youth_council_region)


@admin_router.message(AdminStates.youth_council_region)
async def set_youth_council_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text.strip())
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≥–æ–ª–æ–≤—É –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:")
    await state.set_state(AdminStates.youth_council_head)


@admin_router.message(AdminStates.youth_council_head)
async def set_youth_council_head(message: types.Message, state: FSMContext):
    await state.update_data(head=message.text.strip())
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–µ–∫—Ä–µ—Ç–∞—Ä—è –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:")
    await state.set_state(AdminStates.youth_council_secretary)


@admin_router.message(AdminStates.youth_council_secretary)
async def set_youth_council_secretary(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    admin_id = message.from_user.id

    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    await db.save_youth_council_info(
        user_id=admin_id,
        name=session_data["name"],
        city=session_data["city"],
        region=session_data["region"],
        head=session_data["head"],
        secretary=message.text.strip()
    )

    current_question_index = await db.get_current_question_index(session_code)
    agenda = await db.get_session_agenda(session_code)

    if len(agenda) > current_question_index + 1:
        await message.answer("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ú–† –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", reply_markup=session_control_kb())
        await state.clear()
        await state.update_data(session_code=session_code, session_name=session_name, agenda=agenda, current_question_index=current_question_index)
        return


    await message.answer(
        "–£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é.",
        reply_markup=admin_end_vote_kb()
    )
    await state.clear()
    await state.set_state("admin_control")
    await state.update_data(session_code=session_code, session_name=session_name, agenda=agenda, current_question_index=current_question_index)
    return


@admin_router.message(F.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π")
async def change_agenda(message: types.Message, state: FSMContext):
    session_data = await state.get_data()

    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    if not session_name or not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É —Å–µ—Å—ñ—é.")
        logging.error("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É —Å—Ç–∞–Ω—ñ")
        return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω—é—î –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è —Å–µ—Å—ñ—ó {session_name}")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π (–∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):")
    await state.set_state(AdminStates.session_agenda)


@admin_router.message(F.text == "‚úÖ –ü–æ—á–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ")
async def start_voting(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π
    agenda = await db.get_session_agenda(session_code)
    if not agenda:
        await message.answer("–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è —É —Å—Ç–∞–Ω—ñ
    await state.update_data(agenda=agenda, current_question_index=0)

    # –ü–æ—á–∏–Ω–∞—î–º–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    current_question = agenda[0]

    await db.close_session(session_code)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º —Å–µ—Å—ñ—ó
    participants = await db.get_session_participants(session_code)
    for participant_id in participants:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞–º
        await message.bot.send_message(
            chat_id=participant_id,
            text=f"üìã –ü–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n<b>{current_question}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: '–ó–∞', '–ü—Ä–æ—Ç–∏', '–£—Ç—Ä–∏–º–∞–≤—Å—è'",
            parse_mode="HTML",
            reply_markup=vote_kb()
        )
    await state.set_state("voting")


@admin_router.message(StateFilter("voting"), F.text.in_({"–ó–∞", "–ü—Ä–æ—Ç–∏", "–£—Ç—Ä–∏–º–∞—é—Å—å"}))
async def collect_votes(message: types.Message, state: FSMContext, db: Database):
    print('collect_votes')
    session_data = await state.get_data()
    print(session_data)

    # –û—Ç—Ä–∏–º—É—î–º–æ session_code
    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    current_question_index = await db.get_current_question_index(session_code)
    agenda = await db.get_session_agenda(session_code)

    if current_question_index is None or not agenda or current_question_index >= len(agenda):
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    current_question = agenda[current_question_index]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è
    user_voted = await db.has_user_voted(
        session_code=session_code,
        user_id=message.from_user.id,
        question=current_question
    )

    admin_id = await db.get_admin_id(session_code)

    force_close = False
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é" and admin_id == message.from_user.id:
        force_close = True

    if user_voted and not force_close:
        print(current_question, user_voted)
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.", reply_markup=types.ReplyKeyboardRemove())
        return

    if not force_close and not user_voted:
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–æ–ª–æ—Å
        await db.add_vote(
            session_code=session_code,
            user_id=message.from_user.id,
            question=current_question,
            vote=message.text
        )
        await message.answer("–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    all_votes_collected = await db.check_all_votes_collected(session_code, current_question)
    if all_votes_collected or force_close:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        vote_results = await db.get_vote_results(session_code, current_question)
        count_participants = await db.count_of_participants(session_code)
        vote_results['–ù–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏'] = count_participants - sum(vote_results.values())
        results_text = "\n".join(
            [f"<b>{key}</b>: {value}" for key, value in vote_results.items()]
        )

        decision = "–ù–µ —É—Ö–≤–∞–ª–µ–Ω–æ"
        if int(vote_results['–ó–∞']) * 2 > count_participants:
            decision = "–£—Ö–≤–∞–ª–µ–Ω–æ"

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º
        participants = await db.get_session_participants(session_code)
        for participant_id in participants:
            await message.bot.send_message(
                chat_id=participant_id,
                text=f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:\n<b>{current_question_index + 1}. {current_question}</b>\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n{results_text}\n\n–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ <b>{decision}</b>",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )

        await message.bot.send_message(
            chat_id=admin_id,
            text=f"–í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è –ª—é–¥–∏–Ω–∏, —è–∫–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

        if admin_id == message.from_user.id:
            await state.set_state("proposer_entry")

        # await message.bot.send_message(
        #     chat_id=admin_id,
        #     text=f"–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
        #     reply_markup=admin_vote_kb()
        # )

        # await db.set_current_question_index(session_code, current_question_index + 1)
        # await state.set_state("voting")
    else:
        if message.from_user.id == admin_id:
            await message.answer(
                "–ù–µ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É.",
                reply_markup=force_end_vote_kb()
            )
            await state.set_state("proposer_entry")


# @admin_router.message(StateFilter("proposer_entry"))
# async def set_proposer_name(message: types.Message, state: FSMContext, db: Database):
#


@admin_router.message(StateFilter("proposer_entry"))
async def force_end_vote_and_set_proposed_entry(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    session_code = session_data.get("session_code")
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if not session_code or current_question_index is None or not agenda:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    current_question = agenda[current_question_index]
    admin_id = await db.get_admin_id(session_code)

    current_question_index = await db.get_current_question_index(session_code)

    if current_question_index is None:
        await message.answer("–ù–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –±—É–≤ –∑–Ω–∞–π–¥–µ–Ω–∏–º")
        return

    proposer_name = message.text.strip() if message.text else ''

    if message.text.strip() == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é":
        vote_results = await db.get_vote_results(session_code, current_question)
        count_participants = await db.count_of_participants(session_code)
        vote_results['–ù–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏'] = count_participants - sum(vote_results.values())
        results_text = "\n".join(
            [f"<b>{key}</b>: {value}" for key, value in vote_results.items()]
        )

        decision = "–ù–µ —É—Ö–≤–∞–ª–µ–Ω–æ"
        if int(vote_results['–ó–∞']) * 2 > count_participants:
            decision = "–£—Ö–≤–∞–ª–µ–Ω–æ"

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º
        participants = await db.get_session_participants(session_code)
        for participant_id in participants:
            await message.bot.send_message(
                chat_id=participant_id,
                text=f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:\n<b>{current_question_index + 1}. {current_question}</b>\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n{results_text}\n\n–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ <b>{decision}</b>",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )

        await message.bot.send_message(
            chat_id=admin_id,
            text=f"–í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è –ª—é–¥–∏–Ω–∏, —è–∫–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    else:
        logging.info(f"–ó–∞–π—à–ª–æ –≤ —Ñ—É–Ω–∫—Ü—ñ—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è")

        agenda = await db.get_session_agenda(session_code)

        if not agenda or current_question_index >= len(agenda):
            await message.answer("–ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è/agenda –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
            return

        await db.set_agenda_item_proposer(session_code, current_question, proposer_name)
        await message.answer("–Ü–º'—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ‚úÖ.")

        logging.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞ {proposer_name} –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è {current_question}")

        if len(agenda) > current_question_index + 1:
            new_question = agenda[current_question_index + 1]
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"–ì–æ–ª–æ—Å—É—î–º–æ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –¥–µ–Ω–Ω–æ–≥–æ?\n\n<b>{current_question_index + 2}. {new_question}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ",
                reply_markup=admin_vote_kb()
            )

        else:
            youth_council_info = await db.get_youth_council_info(admin_id)

            text = ""
            if youth_council_info:
                council_info = youth_council_info
                text = (f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ú–†:\n"
                        f"–ù–∞–∑–≤–∞: {council_info.name}\n"
                        f"–ú—ñ—Å—Ç–æ: {council_info.city}\n"
                        f"–†–µ–≥—ñ–æ–Ω: {council_info.region}\n"
                        f"–ì–æ–ª–æ–≤–∞: {council_info.head}\n"
                        f"–°–µ–∫—Ä–µ—Ç–∞—Ä: {council_info.secretary}\n\n"
                        )

            await message.bot.send_message(
                chat_id=admin_id,
                text=f"{text}–£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é.",
                reply_markup=admin_end_vote_kb()
            )

        await db.set_current_question_index(session_code, current_question_index + 1)
        await state.set_state('voting')


@admin_router.message(StateFilter("voting"), F.text == "–ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è")
async def next_question(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if current_question_index + 1 >= len(agenda):
        admin_id = message.from_user.id
        youth_council_info = await db.get_youth_council_info(admin_id)

        text = ""
        if youth_council_info:
            council_info = youth_council_info
            text = (f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ú–†:\n"
                    f"–ù–∞–∑–≤–∞: {council_info.name}\n"
                    f"–ú—ñ—Å—Ç–æ: {council_info.city}\n"
                    f"–†–µ–≥—ñ–æ–Ω: {council_info.region}\n"
                    f"–ì–æ–ª–æ–≤–∞: {council_info.head}\n"
                    f"–°–µ–∫—Ä–µ—Ç–∞—Ä: {council_info.secretary}\n\n"
                    )

        await message.answer(
            f"{text}–£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é.",
            reply_markup=admin_end_vote_kb()
        )
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    next_question_index = current_question_index + 1
    next_question_from_agenda = agenda[next_question_index]

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º —Å–µ—Å—ñ—ó
    participants = await db.get_session_participants(session_code)
    for participant_id in participants:
        await message.bot.send_message(
            chat_id=participant_id,
            text=f"üìã –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—é <b>{next_question_index + 1}</b>:\n<b>{next_question_index + 1}. {next_question_from_agenda}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: '–ó–∞', '–ü—Ä–æ—Ç–∏', '–£—Ç—Ä–∏–º–∞–≤—Å—è'",
            parse_mode="HTML",
            reply_markup=vote_kb()
        )

    await state.update_data(current_question_index=next_question_index)


@admin_router.message(F.text == "üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ä–æ–¥–æ–≤—ñ –≤—ñ–¥–º—ñ–Ω–∫–∏ —ñ–º–µ–Ω")
async def start_filling_name_cases(message: types.Message, state: FSMContext, db: Database):
    user_id = message.from_user.id
    session_data = await state.get_data()
    session_code = session_data.get("session_code")

    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    proposed_names = await db.get_proposed_names_by_admin(session_code, user_id)

    if not proposed_names:
        await message.answer("–í–∏ –Ω–µ –≤–≤–æ–¥–∏–ª–∏ —ñ–º–µ–Ω –ø—ñ–¥ —á–∞—Å —Ü—ñ—î—ó —Å–µ—Å—ñ—ó.")
        return

    await state.update_data(proposed_names=proposed_names, current_index=0)
    await process_next_name(message, state, db)

async def process_next_name(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    proposed_names = session_data.get("proposed_names", [])
    current_index = session_data.get("current_index", 0)

    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")

    if current_index >= len(proposed_names):
        await state.clear()
        await state.update_data(session_code=session_code, session_name=session_name)
        await message.answer("–£—Å—ñ —ñ–º–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—ñ!\n\n–í–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", reply_markup=admin_end_vote_kb())
        return

    current_name = proposed_names[current_index]
    existing_name = await db.get_name_rv(message.from_user.id, current_name)

    if existing_name and existing_name.name_rv:
        await state.update_data(current_name=current_name)
        await message.answer(
            f"–Ü–º'—è <b>{current_name}</b> –≤–∂–µ –º–∞—î —Ä–æ–¥–æ–≤–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫: <b>{existing_name.name_rv}</b>\n\n"
            "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç, —Ç–æ –Ω–∞–∂–º—ñ—Ç—å <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏</b>, —è–∫—â–æ –Ω—ñ, —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:",
            parse_mode="HTML",
            reply_markup=set_rv_name()
        )
    else:
        await state.update_data(current_name=current_name)
        await message.answer(
            f"–Ü–º'—è <b>{current_name}</b> –Ω–µ –º–∞—î —Ä–æ–¥–æ–≤–æ–≥–æ –≤—ñ–¥–º—ñ–Ω–∫—É.\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —Ä–æ–¥–æ–≤–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'</b>, —â–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ —ñ–º'—è.",
            parse_mode="HTML",
            reply_markup=set_rv_name()
        )

    await state.set_state("waiting_for_rv")

@admin_router.message(StateFilter("waiting_for_rv"), F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def keep_existing_rv(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    current_index = session_data.get("current_index", 0)

    await state.update_data(current_index=current_index + 1)
    await process_next_name(message, state, db)

@admin_router.message(StateFilter("waiting_for_rv"))
async def update_name_rv(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    current_name = session_data.get("current_name")
    current_index = session_data.get("current_index", 0)

    await db.update_name_rv(message.from_user.id, current_name, message.text.strip())
    await message.answer(f"–†–æ–¥–æ–≤–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫ –¥–ª—è —ñ–º–µ–Ω—ñ <b>{current_name}</b> —Ç–µ–ø–µ—Ä <b>{message.text.strip()}</b>!", parse_mode="HTML")

    await state.update_data(current_index=current_index + 1)
    await process_next_name(message, state, db)


@admin_router.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é")
async def initiate_end_session(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    session_name = session_data.get('session_name')
    session_code = session_data.get("session_code")

    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    admin_id = message.from_user.id
    youth_council_info = await db.get_youth_council_info(admin_id)

    if not youth_council_info:
        await message.answer(
            "–£ –í–∞—Å –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ú–æ–ª–æ–¥—ñ–∂–Ω—É —Ä–∞–¥—É. \n–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è! \n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ú–†:")
        await state.set_state(AdminStates.youth_council_name)
        return

    await state.update_data(session_code=session_code, session_name=session_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞—Å—ñ–¥–∞–Ω–Ω—è/–ø—Ä–æ—Ç–æ–∫–æ–ª—É:")
    await state.set_state("waiting_for_protocol_number")


@admin_router.message(StateFilter("waiting_for_protocol_number"))
async def ask_for_session_type(message: types.Message, state: FSMContext):
    protocol_number = message.text.strip()
    await state.update_data(protocol_number=protocol_number)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –∑–∞—Å—ñ–¥–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –≤–ª–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ, —Ç—ñ–ª—å–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è '—è–∫–æ–≥–æ?'):", reply_markup=set_session_type_kb())
    await state.set_state("waiting_for_session_type")


@admin_router.message(StateFilter("waiting_for_session_type"))
async def finalize_session_details(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")
    protocol_number = session_data.get("protocol_number")
    session_type = message.text.strip()

    await db.update_session_details(session_code, protocol_number, session_type)
    await complete_session(message, session_code, session_name, state, db)

async def complete_session(message: types.Message, session_code: str, session_name: str, state: FSMContext,
                           db: Database):
    results = await db.end_session(session_code)
    total_participants = await db.count_of_participants(session_code)
    results_text = "\n".join([
        f"<b>{index + 1}. {question}</b>\n–ó–∞: {votes['for']}, –ü—Ä–æ—Ç–∏: {votes['against']}, –£—Ç—Ä–∏–º–∞–ª–∏—Å—å: {votes['abstain']}, –ù–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏: {votes['not_voted']}\n–¶–µ —Ä—ñ—à–µ–Ω–Ω—è –±—É–ª–æ <b>{'–ü—Ä–∏–π–Ω—è—Ç–æ' if votes['for'] * 2 > total_participants else '–ù–µ –ø—Ä–∏–π–Ω—è—Ç–æ'}</b>"
        for index, (question, votes) in enumerate(results.items())
    ])

    try:
        protocol_path = await generate_protocol(session_code, db)
        attendance_list_path = await generate_attendance_list_full(session_code, db)

        protocol_file = FSInputFile(protocol_path)
        await message.answer_document(document=protocol_file)

        attendance_file = FSInputFile(attendance_list_path)
        await message.answer_document(document=attendance_file)

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        os.remove(protocol_path)
        os.remove(attendance_list_path)
        logging.info(f"–§–∞–π–ª–∏ {protocol_path} —Ç–∞ {attendance_list_path} –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {e}")
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {str(e)}")

    participants = await db.get_session_participants(session_code)
    for participant_id in participants:
        await message.bot.send_message(
            chat_id=participant_id,
            text=f"–°–µ—Å—ñ—é <b>{session_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. \n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n\n{results_text}",
            parse_mode="HTML"
        )

    await message.answer(
        f"–°–µ—Å—ñ—é <b>{session_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ—Å–ª–∞–Ω—ñ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º.",
        parse_mode="HTML", reply_markup=admin_menu_kb()
    )
    await state.clear()



@admin_router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—Å—Ç")
@admin_router.message(Command("post"))
async def create_session(message: types.Message, state: FSMContext):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ—á–∏–Ω–∞—î –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –ø–æ—Å—Ç—É —á–µ—Ä–µ–∑ –®–Ü")

    if str(message.from_user.id) not in ['1014099963', '1762778352']:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤")

    await message.answer("–í—Å—Ç–∞–≤—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —è–∫–æ—ó —Å–ª—ñ–¥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å—Ç:")
    await state.set_state("waiting")

@admin_router.message(StateFilter("waiting"))
async def send_generated_post(message: types.Message, state: FSMContext):
    text = message.text
    logging.info(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {text}")

    await message.reply("–ì–µ–Ω–µ—Ä—É—é –ø–æ—Å—Ç, –∑–∞—á–µ–∫–∞–π—Ç–µ...")

    post = await generate_post(client, text)

    if post:
        await message.reply(f"{post}")
    else:
        await message.reply("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    await state.clear()


@admin_router.message(Command("admin_fea"))
async def enter_admin_panel(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø —ñ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∫–∏"""
    if message.from_user.id not in ALLOWED_ADMINS:
        await message.answer("Not allowed", reply_markup=common_kb())
        return

    await state.set_state(AdminState.in_admin)
    await message.answer("‚úÖ –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", reply_markup=admin_fea_kb())

# ---- –í–ò–•–Ü–î –ó –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–Ü ---- #
@admin_router.message(F.text == "/exit_admin")
async def exit_admin_panel(message: types.Message, state: FSMContext):
    """–í–∏—Ö—ñ–¥ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    await state.clear()
    await message.answer("üö™ –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.", reply_markup=common_kb())

# ---- –ü–û–ö–ê–ó –û–°–¢–ê–ù–ù–Ü–• 10 –°–ï–°–Ü–ô ---- #
@admin_router.message(AdminState.in_admin, Command("show_recent"))
async def show_recent_sessions(message: types.Message, db: Database):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 —Å–µ—Å—ñ–π"""
    sessions = await db.get_last_sessions(10)

    if not sessions:
        await message.answer("‚ùå –ù–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–µ—Å—ñ–π.", reply_markup=admin_fea_kb())
        return

    response = "<b>üìä –û—Å—Ç–∞–Ω–Ω—ñ 10 —Å–µ—Å—ñ–π:</b>\n"
    for index, session in enumerate(sessions):
        admin_name = await db.get_admin_name(session.admin_id)
        participants_count = await db.get_participant_count(session.id)
        questions_count = await db.get_questions_count(session.id)
        youth_info = await db.get_youth_council_info(session.admin_id)

        response += (
            f"\n<b>üìå{index + 1}. –°–µ—Å—ñ—è:</b> {session.name} (–ö–æ–¥: {session.code})"
            f"\n<b>üë§ –ê–¥–º—ñ–Ω:</b> {admin_name} (ID: {session.admin_id})"
            f"\n<b>‚ùì –ü–∏—Ç–∞–Ω—å —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ:</b> {questions_count}"
            f"\n<b>üë• –£—á–∞—Å–Ω–∏–∫—ñ–≤:</b> {participants_count}"
            f"\n<b>üèõ –ú–æ–ª–æ–¥—ñ–∂–Ω–∞ —Ä–∞–¥–∞:</b> {youth_info.name if youth_info else '–ù–µ–º–∞—î'}"
            f"\n<b>üßë‚Äç‚öñ –ì–æ–ª–æ–≤–∞:</b> {youth_info.head if youth_info else '–ù–µ–º–∞—î'}"
            f"\n<b>üìÖ –î–∞—Ç–∞:</b> {session.date}\n\n"
        )

    await message.answer(response, parse_mode="HTML", reply_markup=admin_fea_kb())


# ---- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ï–°–Ü–á ---- #
@admin_router.message(AdminState.in_admin, Command("upload_session"))
async def request_session_code(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î –∫–æ–¥ —Å–µ—Å—ñ—ó –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
    await message.answer("‚úç –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_session_code)


@admin_router.message(AdminState.waiting_for_session_code)
async def fetch_session_details(message: types.Message, state: FSMContext, db: Database):
    """–û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é —Ç–∞ –≥–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Ç–æ–∫–æ–ª —ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å"""
    try:
        session_code = int(message.text.strip())  # –ü—Ä–∏–º—É—Å–æ–≤–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ int
    except ValueError:
        await message.answer("‚ùå –ö–æ–¥ —Å–µ—Å—ñ—ó –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!", reply_markup=admin_fea_kb())
        await state.set_state(AdminState.in_admin)
        return

    session = await db.get_session_by_code(session_code)

    if not session:
        await message.answer("‚ùå –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_fea_kb())
        await state.set_state(AdminState.in_admin)
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    admin_name = await db.get_admin_name(session.admin_id)
    participants_count = await db.get_participant_count(session.id)
    questions_count = await db.get_questions_count(session.id)
    youth_info = await db.get_youth_council_info(session.admin_id)
    agenda_items = await db.get_agenda_items(session.id)

    agenda_text = "\n".join([
        f"<b>{index + 1}. {item.description}</b> (–ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ: {item.proposed})"
        for index, item in enumerate(agenda_items)
    ]) if agenda_items else "‚ùå –ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    try:
        protocol_path = await generate_protocol(session_code, db)
        attendance_list_path = await generate_attendance_list_full(session_code, db)

        protocol_file = FSInputFile(protocol_path)
        attendance_file = FSInputFile(attendance_list_path)

        await message.answer_document(document=protocol_file, caption="üìú –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–µ—Å—ñ—ó")
        await message.answer_document(document=attendance_file, caption="üìù –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å")

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        os.remove(protocol_path)
        os.remove(attendance_list_path)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {e}")
        await message.answer(f"‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {str(e)}", reply_markup=admin_fea_kb())

    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Å—ñ—é
    response = (
        f"<b>üìå –°–µ—Å—ñ—è:</b> {session.name} (–ö–æ–¥: {session.code})\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> {session.date}\n"
        f"<b>üî¢ –ù–æ–º–µ—Ä —Å–µ—Å—ñ—ó:</b> {session.number or '–ù–µ–º–∞—î'}\n"
        f"<b>üõ† –¢–∏–ø —Å–µ—Å—ñ—ó:</b> {session.session_type or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>üë§ –ê–¥–º—ñ–Ω:</b> {admin_name} (ID: {session.admin_id})\n"
        f"<b>üìú –ü–∏—Ç–∞–Ω—å —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ:</b> {questions_count}\n"
        f"<b>üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤:</b> {participants_count}\n"
        f"<b>üèõ –ú–æ–ª–æ–¥—ñ–∂–Ω–∞ —Ä–∞–¥–∞:</b> {youth_info.name if youth_info else '–ù–µ–º–∞—î'}\n"
        f"<b>üìç –†–µ–≥—ñ–æ–Ω:</b> {youth_info.region if youth_info else '–ù–µ–º–∞—î'}\n"
        f"<b>üåÜ –ú—ñ—Å—Ç–æ:</b> {youth_info.city if youth_info else '–ù–µ–º–∞—î'}\n"
        f"<b>üßë‚Äç‚öñ –ì–æ–ª–æ–≤–∞:</b> {youth_info.head if youth_info else '–ù–µ–º–∞—î'}\n"
        f"<b>üìã –°–µ–∫—Ä–µ—Ç–∞—Ä:</b> {youth_info.secretary if youth_info else '–ù–µ–º–∞—î'}\n\n"
        f"<b>üìã –ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:</b>\n{agenda_text}"
    )

    await message.answer(response, parse_mode="HTML", reply_markup=admin_fea_kb())

    await state.set_state(AdminState.in_admin)


# ---- –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê ---- #
@admin_router.message(AdminState.in_admin, Command("info_user"))
async def request_user_id(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await message.answer("‚úç –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AdminState.waiting_for_user_id)

@admin_router.message(AdminState.waiting_for_user_id)
async def fetch_user_info(message: types.Message, state: FSMContext, db: Database):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        user_id = int(message.text.strip())

    except ValueError:
        await message.answer("‚ùå –ö–æ–¥ —Å–µ—Å—ñ—ó –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!", reply_markup=admin_fea_kb())
        await state.set_state(AdminState.in_admin)
        return

    user_stats = await db.get_user_statistics(user_id)

    if not user_stats:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", reply_markup=admin_fea_kb())
        await state.set_state(AdminState.in_admin)
        return

    response = (
        f"<b>üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {user_stats['name']} (ID: {user_stats['user_id']})\n"
        f"<b>üé≠ –£—á–∞—Å—Ç—å —É —Å–µ—Å—ñ—è—Ö:</b> {user_stats['participation_count']}\n"
        f"<b>üõ† –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–≤ —Å–µ—Å—ñ—ó:</b> {user_stats['admin_count']}\n\n"
        f"<b>üèõ –¢–æ–ø-3 –º–æ–ª–æ–¥—ñ–∂–Ω—ñ —Ä–∞–¥–∏:</b>\n{user_stats['top_youth_councils']}"
    )

    await message.answer(response, parse_mode="HTML", reply_markup=admin_fea_kb())
    await state.set_state(AdminState.in_admin)

# ---- –í–ò–í–Ü–î –í–°–Ü–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í (–ú–ê–ö–° 30) ---- #
@admin_router.message(Command("id_all_users"))
async def list_all_users(message: types.Message, db: Database):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ 30 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    users = await db.get_all_users(limit=30)

    if not users:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_fea_kb())
        return

    response = "<b>üìú –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
    for user_id, name in users:
        response += f"üÜî ID: {user_id} | üè∑ –Ü–º'—è: {name}\n"

    await message.answer(response, parse_mode="HTML", reply_markup=admin_fea_kb())
