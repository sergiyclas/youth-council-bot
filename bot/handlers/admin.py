import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from bot.keyboards.admin import admin_menu_kb, session_control_kb, vote_kb, admin_vote_kb, force_end_vote_kb
from bot.database.database import Database
from random import randint

admin_router = Router()

class AdminStates(StatesGroup):
    session_name = State()
    session_password = State()
    session_agenda = State()
    agenda_question = State()


@admin_router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä /start –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó.",
        reply_markup=admin_menu_kb()
    )


@admin_router.message(F.text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é")
async def create_session(message: types.Message, state: FSMContext):
    logging.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∏–Ω–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Å–µ—Å—ñ—ó:")
    await state.set_state(AdminStates.session_name)


@admin_router.message(AdminStates.session_name)
async def set_session_name(message: types.Message, state: FSMContext):
    session_name = message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è —Å–µ—Å—ñ—ó: {session_name}")
    await state.update_data(session_name=session_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Å—ñ—ó:")
    await state.set_state(AdminStates.session_password)


@admin_router.message(AdminStates.session_password)
async def set_session_password(message: types.Message, state: FSMContext, db: Database):
    session_password = message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–∞—Ä–æ–ª—å —Å–µ—Å—ñ—ó: {session_password}")
    await state.update_data(session_password=session_password)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ —Å–µ—Å—ñ—ó
    session_code = randint(100000, 999999)
    session_data = await state.get_data()
    logging.info(f"–ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ —Å–µ—Å—ñ—ó: {session_code}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Å—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await db.add_session(
        session_code=session_code,
        session_name=session_data['session_name'],
        session_password=session_password,
        admin_id=message.from_user.id
    )

    # –î–æ–¥–∞—î–º–æ session_code –¥–æ —Å—Ç–∞–Ω—É
    await state.update_data(session_code=session_code)

    logging.info(f"–°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {session_data['session_name']} –∑ –∫–æ–¥–æ–º {session_code}")
    await message.answer(
        f"–°–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞! \n–ö–æ–¥ —Å–µ—Å—ñ—ó: <code>{session_code}</code>\n–ü–∞—Ä–æ–ª—å: <code>{session_password}</code>",
        parse_mode="HTML"
    )
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π (–∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):")
    await state.set_state(AdminStates.session_agenda)


@admin_router.message(AdminStates.session_agenda)
async def set_agenda(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    # –¢–µ–∫—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
    ignored_texts = ["üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π", "‚úÖ –ü–æ—á–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–ª–∞–Ω—É", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç —î —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    if message.text in ignored_texts:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π, –∞ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return
    print(session_data)
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î session_name —ñ session_code —É —Å—Ç–∞–Ω—ñ
    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    if not session_name or not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É.")
        logging.error("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É —Å—Ç–∞–Ω—ñ")
        return

    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç, –≤–∏–¥–∞–ª—è—é—á–∏ –Ω–æ–º–µ—Ä–∏ –ø–µ—Ä–µ–¥ –∫—Ä–∞–ø–∫–æ—é
    raw_agenda = message.text.splitlines()
    agenda = [line.split('.', 1)[1].strip() if '.' in line else line.strip() for line in raw_agenda]
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è —Å–µ—Å—ñ—ó {session_name}: {agenda}")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await db.set_session_agenda(session_code=session_code, agenda=agenda)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    agenda_html = "<b>–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:</b>\n" + "\n".join(
        [f"{i + 1}. {item}" for i, item in enumerate(agenda)]
    )

    await message.answer(
        f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –æ–Ω–æ–≤–ª–µ–Ω–æ.\n\n{agenda_html}\n\n–î–∞–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ:",
        reply_markup=session_control_kb(),
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Å–µ—Å—ñ—ó {session_name}")
    await state.clear()
    await state.update_data(session_code=session_code, session_name=session_name)


@admin_router.message(F.text == "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π")
async def change_agenda(message: types.Message, state: FSMContext):
    session_data = await state.get_data()

    session_name = session_data.get('session_name')
    session_code = session_data.get('session_code')

    if not session_name or not session_code:
        print(session_data)
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É —Å–µ—Å—ñ—é.")
        logging.error("–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É —Å—Ç–∞–Ω—ñ")
        return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω—é—î –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –¥–ª—è —Å–µ—Å—ñ—ó {session_name}")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π (–∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞):")
    await state.set_state(AdminStates.session_agenda)


@admin_router.message(F.text == "‚úÖ –ü–æ—á–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–ª–∞–Ω—É")
async def start_voting(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π
    agenda = await db.get_session_agenda(session_code)
    if not agenda:
        await message.answer("–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è —É —Å—Ç–∞–Ω—ñ
    await state.update_data(agenda=agenda, current_question_index=0)

    # –ü–æ—á–∏–Ω–∞—î–º–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    current_question = agenda[0]
    await message.answer(
        f"–ü–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n1. <b>{current_question}</b>",
        parse_mode="HTML",
        reply_markup=vote_kb()
    )
    await state.set_state("voting")


@admin_router.message(StateFilter("voting"))
@admin_router.message(F.text.in_({"–ó–∞", "–ü—Ä–æ—Ç–∏", "–£—Ç—Ä–∏–º–∞–≤—Å—è"}))
async def collect_votes(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if not session_code or current_question_index is None or not agenda:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–æ–ª–æ—Å
    await db.add_vote(
        session_code=session_code,
        user_id=message.from_user.id,
        question=agenda[current_question_index],
        vote=message.text
    )
    await message.answer("–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏
    all_votes_collected = await db.check_all_votes_collected(session_code, agenda[current_question_index])
    if all_votes_collected:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        vote_results = await db.get_vote_results(session_code, agenda[current_question_index])
        results_text = "\n".join(
            [f"<b>{key}</b>: {value}" for key, value in vote_results.items()]
        )

        await message.answer(
            f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:\n<b>{current_question_index + 1}. {agenda[current_question_index]}</b>\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n{results_text}",
            parse_mode="HTML",
            reply_markup=admin_vote_kb()  # –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        )
        await state.set_state("admin_control")  # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    else:
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        if message.from_user.id == session_data.get("admin_id"):  # –Ø–∫—â–æ —Ü–µ –∞–¥–º—ñ–Ω
            await message.answer(
                "–ù–µ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É.",
                reply_markup=force_end_vote_kb()
            )


@admin_router.message(StateFilter("voting"))
@admin_router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é")
async def force_end_vote(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if not session_code or current_question_index is None or not agenda:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    vote_results = await db.get_vote_results(session_code, agenda[current_question_index])
    results_text = "\n".join(
        [f"<b>{key}</b>: {value}" for key, value in vote_results.items()]
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer(
        f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:\n<b>{current_question_index + 1}. {agenda[current_question_index]}</b>\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n{results_text}",
        parse_mode="HTML",
        reply_markup=admin_vote_kb()  # –ó–º—ñ–Ω—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    )
    await state.set_state("admin_control")  # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞



@admin_router.message(StateFilter("voting"))
@admin_router.message(F.text.in_({"–ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"}))
async def next_question(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    session_code = session_data.get("session_code")
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if current_question_index + 1 >= len(agenda):
        await message.answer(
            "–£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é.",
            reply_markup=admin_vote_kb()
        )
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    next_question_index = current_question_index + 1
    next_question = agenda[next_question_index]

    await state.update_data(current_question_index=next_question_index)
    await message.answer(
        f"–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n<b>{next_question_index + 1}. {next_question}</b>",
        parse_mode="HTML",
        reply_markup=vote_kb()
    )


@admin_router.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é")
async def end_session(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()
    session_name = session_data.get('session_name')

    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results = await db.end_session(session_code)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results_text = "\n".join([
        f"<b>{index + 1}. {question}</b>\n–ó–∞: {votes['for']}, –ü—Ä–æ—Ç–∏: {votes['against']}, –£—Ç—Ä–∏–º–∞–ª–∏—Å—å: {votes['abstain']}"
        for index, (question, votes) in enumerate(results.items())
    ])

    await message.answer(
        f"–°–µ—Å—ñ—é <b>{session_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. \n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n\n{results_text}",
        parse_mode="HTML", reply_markup=admin_menu_kb()
    )
    await state.clear()
