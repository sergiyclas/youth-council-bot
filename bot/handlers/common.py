import logging
import PyPDF2

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import os


from bot.keyboards.admin import session_control_kb
from bot.keyboards.common import common_kb, pdf_kb

from config import OPTION

if str(OPTION) == 'MySQL':
    from bot.database.database import Database
else:
    from bot.database.database_postgres import Database

common_router = Router()


pdf_router = Router()

class PDFMergeStates(StatesGroup):
    uploading = State()
    merging = State()

pdf_files = {}


@common_router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä /start –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    await state.clear()
    await message.answer(
        "–í—ñ—Ç–∞—é! –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π:",
        reply_markup=common_kb()
    )

@common_router.message(Command("info"))
@common_router.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é")
@common_router.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é")
async def session_info(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é.
    """
    session_data = await state.get_data()
    logging.info(f"–î–∞–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {session_data}")

    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")

    if not session_code or not session_name:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Å–µ—Å—ñ—ó.", reply_markup=session_control_kb())
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    participants = await db.get_session_participants_with_names(session_code)
    participant_list = "\n".join([f"{i + 1}. {p['name']}" for i, p in enumerate(participants)])

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π
    agenda = await db.get_session_agenda(session_code)
    agenda_text = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(agenda)])

    await message.answer(
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é:\n"
        f"üîë –ö–æ–¥: <code>{session_code}</code>\n"
        f"üìã –ù–∞–∑–≤–∞: <b>{session_name}</b>\n\n"
        f"–£—á–∞—Å–Ω–∏–∫–∏:\n{participant_list}\n\n"
        f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:\n{agenda_text}",
        parse_mode="HTML"
    )


@common_router.message(Command("help"))
@common_router.message(F.text == "üìã –î–æ–ø–æ–º–æ–≥–∞")
@common_router.message(F.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def help_command(message: types.Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.
    """
    await message.answer(
        text=(
            "–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–µ—Å—ñ—ó, –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "üîπ <b>/create_session</b> - –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞).\n"
            "üîπ <b>/join</b> - –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó (–¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞).\n"
            "üîπ <b>/info</b> - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é.\n"
            "üîπ <b>/leave</b> - –í–∏–π—Ç–∏ –∑ —Å–µ—Å—ñ—ó.\n"
            "üîπ <b>/help</b> - –î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
            "üîπ <b>/merge_pdf</b> - –û–±'—î–¥–Ω–∞—Ç–∏ pdf-—Ñ–∞–π–ª–∏ (–º–∞–∫—Å. 5 –∑–∞ —Ä–∞–∑).\n"
            "üîπ <b>/post</b> - –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ AI (–ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤).\n"
        ),
        parse_mode="HTML"
    )


@pdf_router.message(Command("merge_pdf"))
async def start_pdf_merge(message: types.Message, state: FSMContext):
    pdf_files[message.from_user.id] = []
    await state.set_state(PDFMergeStates.uploading)
    await message.answer(
        "–°–∫–∏–Ω—å—Ç–µ PDF-—Ñ–∞–π–ª. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ 5 —Ñ–∞–π–ª—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–±'—î–¥–Ω–∞—Ç–∏ PDF', –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ.",
        reply_markup=pdf_kb())


@pdf_router.message(PDFMergeStates.uploading, F.document)
async def receive_pdf(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id

    if user_id not in pdf_files:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /merge_pdf.")
        return

    if len(pdf_files[user_id]) >= 5:
        await message.answer("–õ—ñ–º—ñ—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û–±'—î–¥–Ω–∞—Ç–∏ PDF'.")
        return

    if message.document.mime_type != "application/pdf":
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ PDF-—Ñ–∞–π–ª.")
        return

    file_id = message.document.file_id
    file_path = f"temp_{user_id}_{len(pdf_files[user_id]) + 1}.pdf"

    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, file_path)

    pdf_files[user_id].append(file_path)
    await message.answer(
        f"–§–∞–π–ª {message.document.file_name} –¥–æ–¥–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ {5 - len(pdf_files[user_id])} —Ñ–∞–π–ª—ñ–≤.")


@pdf_router.message(PDFMergeStates.uploading, F.text == "–û–±'—î–¥–Ω–∞—Ç–∏ PDF")
async def ask_for_pdf_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in pdf_files or len(pdf_files[user_id]) == 0:
        await state.clear()
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª—É, —Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–µ–º–∞.\n\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è",
                             reply_markup=session_control_kb())
        return

    await state.set_state("waiting_for_pdf_name")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª—É:")


@pdf_router.message(StateFilter("waiting_for_pdf_name"))
async def merge_pdfs_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    pdf_name = message.text.strip()

    if user_id not in pdf_files or len(pdf_files[user_id]) == 0:
        await message.answer("–í–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª—É.")
        return

    output_filename = f"{pdf_name}.pdf"

    try:
        merger = PyPDF2.PdfMerger()
        for pdf in pdf_files[user_id]:
            merger.append(pdf)
        merger.write(output_filename)
        merger.close()

        await message.answer_document(types.FSInputFile(output_filename))
        await message.answer("–í–∞—à PDF-—Ñ–∞–π–ª –æ–±'—î–¥–Ω–∞–Ω–æ!\n\n–£—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!", reply_markup=common_kb())

    except Exception as e:
        await message.answer(f"‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±'—î–¥–Ω–∞–Ω–Ω—è PDF: {str(e)}")

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö PDF-—Ñ–∞–π–ª—ñ–≤
    try:
        for pdf in pdf_files[user_id]:
            if os.path.exists(pdf):
                os.remove(pdf)
        if os.path.exists(output_filename):
            os.remove(output_filename)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤: {e}")

    # –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤
    del pdf_files[user_id]

    await state.clear()