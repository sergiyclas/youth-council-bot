import logging

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards.admin import admin_menu_kb
from bot.keyboards.common import common_kb

from config import OPTION

if str(OPTION) == 'MySQL':
    from bot.database.database import Database
else:
    from bot.database.database_postgres import Database

common_router = Router()

@common_router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä /start –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    await state.clear()
    await message.answer(
        "–í—ñ—Ç–∞—é! –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π:",
        reply_markup=common_kb()
    )

@common_router.message(Command("info"))
@common_router.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é")
@common_router.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é")
async def session_info(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é.
    """
    session_data = await state.get_data()
    logging.info(f"–î–∞–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {session_data}")

    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")

    if not session_code or not session_name:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Å–µ—Å—ñ—ó.", reply_markup=admin_menu_kb())
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    participants = await db.get_session_participants_with_names(session_code)
    participant_list = "\n".join([f"{i + 1}. {p['name']}" for i, p in enumerate(participants)])

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π
    agenda = await db.get_session_agenda(session_code)
    agenda_text = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(agenda)])

    await message.answer(
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é:\n"
        f"üîë –ö–æ–¥: <code>{session_code}</code>\n"
        f"üìã –ù–∞–∑–≤–∞: <b>{session_name}</b>\n\n"
        f"–£—á–∞—Å–Ω–∏–∫–∏:\n{participant_list}\n\n"
        f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:\n{agenda_text}",
        parse_mode="HTML"
    )


@common_router.message(Command("help"))
@common_router.message(F.text == "üìã –î–æ–ø–æ–º–æ–≥–∞")
@common_router.message(F.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def help_command(message: types.Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.
    """
    await message.answer(
        text=(
            "–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Å–µ—Å—ñ—ó, –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "üîπ <b>/create_session</b> - –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞).\n"
            "üîπ <b>/join</b> - –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó (–¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞).\n"
            "üîπ <b>/info</b> - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é.\n"
            "üîπ <b>/leave</b> - –í–∏–π—Ç–∏ –∑ —Å–µ—Å—ñ—ó.\n"
            "üîπ <b>/help</b> - –î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
            "üîπ <b>/post</b> - –ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ AI (–ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤).\n"
        ),
        parse_mode="HTML"
    )
