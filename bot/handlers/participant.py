import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from aiogram.filters import Command

from bot.keyboards.admin import admin_menu_kb, force_end_vote_kb
from bot.keyboards.participant import participant_menu_kb

from config import OPTION

if str(OPTION) == 'MySQL':
    from bot.database.database import Database
else:
    from bot.database.database_postgres import Database

participant_router = Router()

class ParticipantStates:
    entering_session_code = "entering_session_code"
    entering_session_password = "entering_session_password"
    entering_name = "entering_name"
    voting = "voting"

@participant_router.message(Command("join"))
@participant_router.message(F.text == "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó")
async def join_session(message: types.Message, state: FSMContext):
    """
    –£—á–∞—Å–Ω–∏–∫ –ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Å—ñ—ó.
    """
    logging.info(f"–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Å—ñ—ó, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id}")
    await state.set_state(ParticipantStates.entering_session_code)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Å–µ—Å—ñ—ó:")

@participant_router.message(StateFilter(ParticipantStates.entering_session_code))
async def handle_session_code(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ —Å–µ—Å—ñ—ó.
    """
    session_code = message.text.strip()
    session = await db.get_session_by_code(session_code)

    if not session:
        await message.answer("–°–µ—Å—ñ—è –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞—Ö–æ–¥–∏—Ç—å –¥–æ —Å–µ—Å—ñ—ó {session_code}")
    await state.update_data(session_code=session_code)
    await state.set_state(ParticipantStates.entering_session_password)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —Å–µ—Å—ñ—ó:")

@participant_router.message(StateFilter(ParticipantStates.entering_session_password))
async def handle_session_password(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å–µ—Å—ñ—ó.
    """
    data = await state.get_data()
    session_code = data.get("session_code")
    session = await db.get_session_by_code(session_code)

    if not session or session.password != message.text.strip():
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —Å–µ—Å—ñ—ó {session_code}")
    await state.set_state(ParticipantStates.entering_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")

@participant_router.message(StateFilter(ParticipantStates.entering_name))
async def handle_name(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ—î —ñ–º'—è.
    """
    user_name = message.text.strip()
    data = await state.get_data()
    session_code = data.get("session_code")

    # –î–æ–¥–∞—î–º–æ —É—á–∞—Å–Ω–∏–∫–∞ –¥–æ —Å–µ—Å—ñ—ó –∑ —ñ–º'—è–º
    await db.add_participant(session_code=session_code, user_id=message.from_user.id, user_name=user_name)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ session_code, session_name —Ç–∞ user_name
    session = await db.get_session_by_code(session_code)

    await state.set_state("voting")
    await state.update_data(session_code=session.code, session_name=session.name, user_name=user_name)

    await message.answer(
        f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó <b>{session.name}</b> —è–∫ <b>{user_name}</b>!",
        parse_mode="HTML",
        reply_markup=participant_menu_kb()
    )

@participant_router.message(StateFilter("voting"), F.text.in_({"–ó–∞", "–ü—Ä–æ—Ç–∏", "–£—Ç—Ä–∏–º–∞—é—Å—å"}))
async def collect_votes(message: types.Message, state: FSMContext, db: Database):
    session_data = await state.get_data()

    print('user_participant')

    # –û—Ç—Ä–∏–º—É—î–º–æ session_code
    session_code = session_data.get("session_code")
    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    current_question_index = session_data.get("current_question_index", 0)
    agenda = session_data.get("agenda", [])

    if current_question_index is None or not agenda or current_question_index >= len(agenda):
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    current_question = agenda[current_question_index]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è
    user_voted = await db.has_user_voted(
        session_code=session_code,
        user_id=message.from_user.id,
        question=current_question
    )

    admin_id = await db.get_admin_id(session_code)

    force_close = False
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—é" and admin_id == message.from_user.id:
        force_close = True

    if user_voted and not force_close:
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.", reply_markup=types.ReplyKeyboardRemove())
        return

    if not force_close and not user_voted:
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–æ–ª–æ—Å
        await db.add_vote(
            session_code=session_code,
            user_id=message.from_user.id,
            question=current_question,
            vote=message.text
        )
        await message.answer("–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

    all_votes_collected = await db.check_all_votes_collected(session_code, current_question)
    if all_votes_collected or force_close:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        vote_results = await db.get_vote_results(session_code, current_question)
        count_participants = await db.count_of_participants(session_code)
        vote_results['–ù–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏'] = count_participants - sum(vote_results.values())
        results_text = "\n".join(
            [f"<b>{key}</b>: {value}" for key, value in vote_results.items()]
        )

        decision = "–ù–µ —É—Ö–≤–∞–ª–µ–Ω–æ"
        if int(vote_results['–ó–∞']) * 2 > count_participants:
            decision = "–£—Ö–≤–∞–ª–µ–Ω–æ"

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º
        participants = await db.get_session_participants(session_code)
        for participant_id in participants:
            await message.bot.send_message(
                chat_id=participant_id,
                text=f"–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è:\n<b>{current_question_index + 1}. {current_question}</b>\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n{results_text}\n\n–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ <b>{decision}</b>",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )

        await message.bot.send_message(
            chat_id=admin_id,
            text=f"–í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è –ª—é–¥–∏–Ω–∏, —è–∫–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    else:
        if message.from_user.id == admin_id:
            await message.answer(
                "–ù–µ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É.",
                reply_markup=force_end_vote_kb()
            )


@participant_router.message(Command("info"))
@participant_router.message(F.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é")
async def session_info(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é.
    """
    session_data = await state.get_data()
    logging.info(f"–î–∞–Ω—ñ —Å—Ç–∞–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {session_data}")

    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")

    if not session_code or not session_name:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Å–µ—Å—ñ—ó.", reply_markup=admin_menu_kb())
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤
    participants = await db.get_session_participants_with_names(session_code)
    participant_list = "\n".join([f"{i + 1}. {p['name']}" for i, p in enumerate(participants)])

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π
    agenda = await db.get_session_agenda(session_code)
    agenda_text = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(agenda)])

    await message.answer(
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é:\n"
        f"üîë –ö–æ–¥: <code>{session_code}</code>\n"
        f"üìã –ù–∞–∑–≤–∞: <b>{session_name}</b>\n\n"
        f"–£—á–∞—Å–Ω–∏–∫–∏:\n{participant_list}\n\n"
        f"–ü–æ—Ä—è–¥–æ–∫ –¥–µ–Ω–Ω–∏–π:\n{agenda_text}",
        parse_mode="HTML"
    )


@participant_router.message(Command('leave'))
@participant_router.message(F.text == "üö™ –í–∏–π—Ç–∏ –∑ —Å–µ—Å—ñ—ó")
async def leave_session(message: types.Message, state: FSMContext, db: Database):
    """
    –£—á–∞—Å–Ω–∏–∫ –∑–∞–ª–∏—à–∞—î —Å–µ—Å—ñ—é.
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
    session_data = await state.get_data()
    session_code = session_data.get("session_code")
    session_name = session_data.get("session_name")
    user_id = message.from_user.id

    if not session_code:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∂–æ–¥–Ω—ñ–π —Å–µ—Å—ñ—ó.")
        return

    admin_id = await db.get_admin_id(session_code)
    if user_id == admin_id:
        session_data = await state.get_data()
        session_name = session_data.get('session_name')

        session_code = session_data.get("session_code")
        if not session_code:
            await message.answer("–ü–æ–º–∏–ª–∫–∞: —Å–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results = await db.end_session(session_code)

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results_text = "\n".join([
            f"<b>{index + 1}. {question}</b>\n–ó–∞: {votes['for']}, –ü—Ä–æ—Ç–∏: {votes['against']}, –£—Ç—Ä–∏–º–∞–ª–∏—Å—å: {votes['abstain']}"
            for index, (question, votes) in enumerate(results.items())
        ])

        participants = await db.get_session_participants(session_code)
        for participant_id in participants:
            await message.bot.send_message(
                chat_id=participant_id,
                text=f"–°–µ—Å—ñ—é <b>{session_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. \n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n\n{results_text}",
                parse_mode="HTML"
            )

        await message.answer(
            f"–°–µ—Å—ñ—é <b>{session_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ—Å–ª–∞–Ω—ñ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º.",
            parse_mode="HTML", reply_markup=admin_menu_kb()
        )
        await state.clear()

    else:
        # –í–∏–¥–∞–ª—è—î–º–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        try:
            await db.remove_participant(session_code=session_code, user_id=user_id)
            await state.clear()
            await message.answer(
                f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ —ñ–∑ —Å–µ—Å—ñ—ó <b>{session_name}</b> (–∫–æ–¥: {session_code}).",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–µ—Å—ñ—é: {e}")
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–µ—Å—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
